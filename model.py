"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LyxOdykT8bKuILFBSRbR0M8jMWIbZhu-

Install dependancies and setup
"""

!pip install tensorflow tensorflow-gpu opencv-python matplotlib

!pip list

import tensorflow as tf
import os

# Avoid OOM errors by setting GPU Memory Consumption Growth
gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus: 
    tf.config.experimental.set_memory_growth(gpu, True)

tf.config.list_physical_devices('GPU')

"""Remove Dodgy Images"""

import cv2
import imghdr

from google.colab import drive
drive.mount('/content/drive')

dataset_path = '/content/drive/My Drive/dataset/Database'

os.listdir(dataset_path)

image_exts = ['jpeg','jpg', 'bmp', 'png']

for image_class in os.listdir(dataset_path):
  print(image_class)

for image_class in os.listdir(dataset_path): 
    for image in os.listdir(os.path.join(dataset_path, image_class)):
        image_path = os.path.join(dataset_path, image_class, image)
        try: 
            img = cv2.imread(image_path)
            tip = imghdr.what(image_path)
            if tip not in image_exts: 
                print('Image not in ext list {}'.format(image_path))
                os.remove(image_path)
        except Exception as e: 
            print('Issue with image {}'.format(image_path))

"""Load Data"""

import numpy as np
from matplotlib import pyplot as plt

data = tf.keras.utils.image_dataset_from_directory('/content/drive/My Drive/dataset/Database')

data_iterator = data.as_numpy_iterator()

batch = data_iterator.next()

len(batch)

batch[0].shape

batch[1]

fig, ax = plt.subplots(ncols=5, figsize=(20,20))
for idx, img in enumerate(batch[0][:5]):
    ax[idx].imshow(img.astype(int))
    ax[idx].title.set_text(batch[1][idx])

class_names = ['Balloon vine', 'Coriander', 'Karanda', 'Lemon', 'Mint', 'Mustard', 'Not a matching herb','Oleander', 'Pomegranate']

batch[0].max()

"""Data Preprocessing

Scale Data/ Normalize
"""

data = data.map(lambda x,y: (x/255, y))

data.as_numpy_iterator().next()[0].max()

"""Split Data"""

len(data)

train_size = int(len(data)*.7)
val_size = int(len(data)*.2)
test_size = int(len(data)*.1)+1

train_size+val_size+test_size

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size+val_size).take(test_size)

len(train)

len(test)

"""Build Model"""

train

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten

model = Sequential()

model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D())

model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())

model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(9, activation='softmax'))

model.compile(optimizer = 'adam', loss=tf.losses.SparseCategoricalCrossentropy(), metrics=['accuracy'])

model.summary()

"""Train"""

logdir='logs'

tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

hist = model.fit(train, epochs=5, validation_data=val, callbacks=[tensorboard_callback])

"""Plot Performance"""

fig = plt.figure()
plt.plot(hist.history['loss'], color='teal', label='loss')
plt.plot(hist.history['val_loss'], color='orange', label='val_loss')
fig.suptitle('Loss', fontsize=20)
plt.legend(loc="upper left")
plt.show()

fig = plt.figure()
plt.plot(hist.history['accuracy'], color='teal', label='accuracy')
plt.plot(hist.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

"""Evaluate"""

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy
from keras.utils import to_categorical

pre = Precision()
re = Recall()
acc = BinaryAccuracy()

for batch in test.as_numpy_iterator():
  x, y = batch
  y = to_categorical(y, num_classes=9)
  yhat = model.predict(x)
  pre.update_state(y, yhat)
  re.update_state(y, yhat)
  acc.update_state(y, yhat)

print (f'Precision:{pre.result().numpy()}, Recall:{re.result().numpy()}, Accuracy:{acc.result().numpy()}')

"""Save the model"""

from tensorflow.keras.models import load_model

model.save(os.path.join('/content/drive/My Drive','model.h5'))

"""Test"""

from keras.utils import load_img, img_to_array
import numpy as np
from keras.optimizers import RMSprop

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Pomegranate/PG-S-001.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/PomegranateTest.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Pomegranate/PG-S-002.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Pomegranate/PG-S-003.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Pomegranate/PG-S-004.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Pomegranate/PG-S-006.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

# Get the predicted output probabilities for the input image
output_probabilities = model.predict(image)
# Get the index of the maximum value in the output array
predicted_class_index = np.argmax(output_probabilities)
# Get the name of the predicted class
predicted_class_name = class_names[predicted_class_index]
# Print the predicted class name
print(predicted_class_name)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Mint/M-S-012.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])


# predicting images
image = load_img('/content/drive/My Drive/dataset/Database/Lemon/0010_0011.jpg', target_size=(256, 256))
image = img_to_array(image)
image = np.reshape(image,[1,256,256,3])
model.predict(image)

# Get the predicted output probabilities for the input image
output_probabilities = model.predict(image)
# Get the index of the maximum value in the output array
predicted_class_index = np.argmax(output_probabilities)
# Get the name of the predicted class
predicted_class_name = class_names[predicted_class_index]
# Print the predicted class name
print(predicted_class_name)
